aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=c(0,23), labels=seq(0,23))
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- plot + scale_x_discrete("Часы", limits=c(0,23))
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=c(0,23))
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:23, labels=0:23)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:22, labels=0:22)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:23, labels=0:22)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:22, labels=0:23)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:22, labels=0:23)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "grey"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
Sys.time()
Sys.time() - 3600
?melt
library(reshape2)
?dcast
long <- melt(airquality, id.vars=c('Month', 'Day'))
head(long)
dcast(long)
dcast(long, Month ~ variable)
dcast(long, Month + Day ~ variable)
?grep
head(airquality)
qplot(Temp, data=airquality, geom="histogram")
qplot(Wind, data=airquality, geom="histogram")
qplot(Wind, data=airquality, geom="histogram", aes(fill = ..count..))
head(iris)
as.logical(NaN)
Inf - Inf
Inf / 0
-Inf * 0
i.usage <- c(NA, NA, NA, NA, NA, NA, NA, 2, 3, 5,
7, 8, 11, 12, 14, 16, 18, 21, 23, NA,
NA, NA, NA, 39)
t.iu <- ts(i.usage, start = 1990, end = 2013)
plot(t.iu)
model <- HoltWinters(t.iu, beta=FALSE, gamma=FALSE)
?HoltWinters
concern <- data.frame(
years = c(1990, 1997, 1999, 2000, 2001, 2003, 2007, 2008, 2014),
concern = c(78, 72, 70, 82, 78, 95, 91, 90, 90))
i.dates <- data.frame(
dates = c(2006, 2013),
n = c('WikiLeaks', 'Snowden'))
library(ggplot2)
p <- ggplot(concern, aes(x = years, y = concern))
p <- p + geom_point(size = 4)
p <- p + stat_smooth(se = FALSE)
p <- p + ylim(0, 100)
p <- p + labs(title="Overall privacy concerns dynamics",
y = "Privacy concern (%)",
x = "Year")
p <- p + geom_text(data = i.dates, aes(x = dates, y = c(0, 0), label = n),
angle = 90, hjust=0, vjust = -1)
p <- p + geom_vline(xintercept = i.dates$dates, color = 'red')
p
i.users <- c(117.238,178.29,301.15,427.14,494.4,688.358,760.212,897.75,1038.432,1182.24,1395.597,1546.635,1768.962,2065.05,2298.318,2535.516,2778.555)
i.users <- ts(i.users, start = 1997)
plot(diff(i.users, differences=2))
acf(i.users)
pacf(i.users)
library('forecast')
model <- arima(i.users, order=c(1,2,2))
prediction <- forecast.Arima(model, h = 7)
plot.forecast(prediction, main="Number of internet users worldwide",
ylab = 'Millions of users',
xlab = 'Year')
plot(diff(i.users, differences=2))
pacf(i.users)
library('forecast')
model <- arima(i.users, order=c(1,2,2))
prediction <- forecast.Arima(model, h = 7)
plot.forecast(prediction, main="Number of internet users worldwide",
ylab = 'Millions of users',
xlab = 'Year')
ls()
?ls
rm(list = ls())
?library
library(ggplot2)
qplot(cars)
head(cars)
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
library(RCurl)
library(rjson)
library(ggplot2)
library(RColorBrewer)
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
df <- data.frame()
for(i in json.data$version-10:json.data$version){
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
a <- 100
for(i in a-10:a){}
for(i in a-10:a){ print(i) }
for(i in (a-10):a){ print(i) }
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
library(RCurl)
library(rjson)
library(ggplot2)
library(RColorBrewer)
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
df <- data.frame()
for(i in (json.data$version-10):json.data$version){
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
df <- unique(df)
df$timestamp <- strptime(as.character(df$timestamp), format = '%H:%M %d.%m.%Y')
df$hour <- df$timestamp$hour
df$day <- strftime(df$timestamp, format='%d %b')
df <- aggregate(df, by = list(df$day, df$hour), FUN = length)
df <- df[, 1:3]
names(df) <- c('Date', 'Hour', 'Amount')
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
plot <- ggplot(df, aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Activity"))
plot <- plot + scale_x_discrete("Hour", limits=0:22, labels=0:23)
plot <- plot + scale_y_discrete("Day")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "grey"))
plot <- plot + ggtitle(expression("Publication frequency"))
print(plot)
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
Sys.setlocale(category = "LC_ALL", locale = "C")
library(RCurl)
library(rjson)
library(ggplot2)
library(RColorBrewer)
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
df <- data.frame()
for(i in (json.data$version-10):json.data$version){
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
df <- unique(df)
df$timestamp <- strptime(as.character(df$timestamp), format = '%H:%M %d.%m.%Y')
df$hour <- df$timestamp$hour
df$day <- strftime(df$timestamp, format='%d %b')
df <- aggregate(df, by = list(df$day, df$hour), FUN = length)
df <- df[, 1:3]
names(df) <- c('Date', 'Hour', 'Amount')
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
plot <- ggplot(df, aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Activity"))
plot <- plot + scale_x_discrete("Hour", limits=0:22, labels=0:23)
plot <- plot + scale_y_discrete("Day")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "grey"))
plot <- plot + ggtitle(expression("Publication frequency"))
print(plot)
df
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
Sys.setlocale(category = "LC_ALL", locale = "C")
library(RCurl)
library(rjson)
library(ggplot2)
library(RColorBrewer)
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
df <- data.frame()
for(i in (json.data$version-10):json.data$version){
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
df <- unique(df)
df$timestamp <- strptime(as.character(df$timestamp), format = '%H:%M %d.%m.%Y')
df$hour <- df$timestamp$hour
df$day <- strftime(df$timestamp, format='%d %b')
df <- aggregate(df, by = list(df$day, df$hour), FUN = length)
df <- df[, 1:3]
names(df) <- c('Date', 'Hour', 'Amount')
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
plot <- ggplot(df, aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Activity"))
plot <- plot + scale_x_discrete("Hour", limits=0:23, labels=0:23)
plot <- plot + scale_y_discrete("Day")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "grey"))
plot <- plot + ggtitle(expression("Publication frequency"))
print(plot)
my.data.frame <- mtcars
my.data.frame
head(my.data.frame
)
head(my.data.frame, 10)
# -*- coding: utf-8 -*-
# Source online: http://pastebin.com/74tpbMzR
# Required libraries:
# RCurl, rjson, ggplot2, RColorBrewer
# If you haven't installed them yet, uncomment and execute this command:
# install.packages(c("RCurl", "rjson", "ggplot2", "RColorBrewer"))
# Declaring constants
# These are for my Kimono labs API
install.packages(c("RCurl", "rjson", "ggplot2", "RColorBrewer"))
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
api.key
library(RCurl)
library(rjson)
# Constructing URL for last json snapshot
json.url
paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
json.url
getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
json.file
json.data <- fromJSON(json.file)
json.data
results.from.json(json.data)
results.from.json <- function(json.data){
df <- data.frame(title=c(), link=c(), time=c(), text=c())
for(item in json.data$results$collection1){
r = data.frame(title = item$title$text,
link = item$title$href,
time = item$timestamp,
text = item$text)
df <- rbind(df, r)
}
return(df)
}
df <- results.from.json(json.data)
?fromJson
?fromJSON
df <- results.from.json(json.data)
head(df)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
head(csv.row)
head(csv.rows)
df <- data.frame()
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
?read.csv
csv.rows
csv.file
csv.rows <- read.csv(textConnection(csv.file), skip=c(1, 20))
csv.rows <- read.csv(textConnection(csv.file), skip=20)
csv.rows
csv.rows <- read.csv(textConnection(csv.file), skip=1)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
csv.file
substr(csv.file, -1)
?substr
for(i in 510:json.data$version){
print(i)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
for(i in 510:json.data$version){
print(i)
json.url <- paste0('https://www.kimonolabs.com/api/', i, '/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
json.rows <- results.from.json(json.data)
df <- rbind(df, json.rows)
}
df <- data.frame()
for(i in 510:json.data$version){
print(i)
json.url <- paste0('https://www.kimonolabs.com/api/', i, '/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
json.rows <- results.from.json(json.data)
df <- rbind(df, json.rows)
}
json.data
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
# Loading json as list object
# ssl.verifypeer - for https on Windows
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
last <- json.data$version
last
df <- data.frame()
last <- json.data$version
for(i in 510:json.data$version){
print(i)
json.url <- paste0('https://www.kimonolabs.com/api/', i, '/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
json.rows <- results.from.json(json.data)
df <- rbind(df, json.rows)
}
nrow(df)
df <- unique(df)
nrow(df)
names(df)
summary(df$time)
class(df$time)
df$timestamp <- strptime(as.character(df$time), format = '%H:%M %d.%m.%Y')
class(df$timestamp)
hist(df$timestamp, breaks='hours')
summary(df$timestamp)
df.filtered.1 <- df[df$timestamp >= timelimits$from & df$timestamp <= timelimits$to, ]
timelimits <- list(
from = as.POSIXct('2014-10-30 00:00:00'),
to = as.POSIXct('2014-10-30 23:59:59')
)
df.filtered.1 <- df[df$timestamp >= timelimits$from & df$timestamp <= timelimits$to, ]
df$hour <- df$timestamp$hour
df$hour
df <- data.frame()
last <- json.data$version
for(i in 1:last){
print(i)
json.url <- paste0('https://www.kimonolabs.com/api/', i, '/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
json.rows <- results.from.json(json.data)
df <- rbind(df, json.rows)
}
nrow(df)
df <- unique(df)
nrow(df)
library(ggplot2)
library(RColorBrewer)
df$timestamp <- strptime(as.character(df$time), format = '%H:%M %d.%m.%Y')
df$hour <- df$timestamp$hour
df$day <- strftime(df$timestamp, format='%d %b')
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
# Adding geom
plot <- plot + geom_tile()
names(df)
plot
df.plot <- aggregate(df, by = list(df$day, df$hour), FUN = length)
df.plot <- df.plot[, 1:3]
names(df.plot) <- c('Date', 'Hour', 'Amount')
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
# Adding geom
plot <- plot + geom_tile()
plot
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot
plot <- plot + scale_x_discrete("Часы", limits=0:22, labels=0:23)
plot <- plot + scale_y_discrete("Дата")
plot
plot <- plot + coord_equal()
plot
plot <- plot + theme_bw()
plot
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "grey"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
shiny::runApp('Documents/RIA_lectures/shiny_test')
shiny::runApp('Documents/duma/duma')
shiny::runApp('Documents/duma/duma')
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
library(RCurl)
library(rjson)
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
results.from.json <- function(json.data){
df <- data.frame(title=c(), link=c(), time=c(), text=c())
for(item in json.data$results$collection1){
r = data.frame(title = item$title$text,
link = item$title$href,
time = item$timestamp,
text = item$text)
df <- rbind(df, r)
}
return(df)
}
df <- results.from.json(json.data)
head(df)
for(i in 1:json.data$version){
print(i)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
df <- data.frame()
for(i in 1:json.data$version){
print(i)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
nrow(df)
df <- unique(df)
nrow(df)
df$timestamp <- strptime(as.character(df$timestamp), format = '%H:%M %d.%m.%Y')
hist(df$timestamp, breaks='hours')
summary(df$timestamp)
head(df)
write.csv('ria_lenta.csv')
head(df)
write.csv(df, 'ria_lenta.csv')
setwd('~/Documents/RIA_Lectures')
write.csv(df, 'ria_lenta.csv')
setwd('~/Documents/RIA_lectures')
write.csv(df, 'ria_lenta.csv')
