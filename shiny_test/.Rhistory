json.data <- fromJSON(json.file)
# Parsing JSON fucntion
results.from.json <- function(json.data){
df <- data.frame(title=c(), link=c(), time=c(), text=c())
for(item in json.data$results$collection1){
r = data.frame(title = item$title$text,
link = item$title$href,
time = item$timestamp,
text = item$text)
df <- rbind(df, r)
}
return(df)
}
# Parsing JSON
results.from.json(json.data)
# Parsing csv - it's simplier
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8')
csv.rows <- read.csv(textConnection(csv.file), skip=1)
# Parsing all data: current and previous
df <- data.frame()
for(i in 1:json.data$version){
print(i)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8')
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
# Clearing from duplicates
nrow(df)
df <- nrow(unique(df))
nrow(df)
# Transforming date-time strings to date-time objects
df$timestamp <- strptime(as.character(df$timestamp), format = '%H:%M %d.%m.%Y')
# Simple plot
hist(df$timestamp, breaks='mins')
# Filtering
# Declaring constants
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
# Loading libraries
library(RCurl)
library(rjson)
# Constructing URL
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
# Loading json as list
json.file <- getURL(json.url, .encoding = 'UTF-8')
json.data <- fromJSON(json.file)
# Parsing JSON fucntion
results.from.json <- function(json.data){
df <- data.frame(title=c(), link=c(), time=c(), text=c())
for(item in json.data$results$collection1){
r = data.frame(title = item$title$text,
link = item$title$href,
time = item$timestamp,
text = item$text)
df <- rbind(df, r)
}
return(df)
}
# Parsing JSON
results.from.json(json.data)
# Parsing csv - it's simplier
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8')
csv.rows <- read.csv(textConnection(csv.file), skip=1)
# Parsing all data: current and previous
df <- data.frame()
for(i in 1:json.data$version){
print(i)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8')
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
# Clearing from duplicates
nrow(df)
df <- unique(df)
nrow(df)
# Transforming date-time strings to date-time objects
df$timestamp <- strptime(as.character(df$timestamp), format = '%H:%M %d.%m.%Y')
# Simple plot
hist(df$timestamp, breaks='mins')
# Filtering
density(df$timestamp, breaks='mins')
density(df$timestamp)
hist(df$timestamp, breaks='hours')
summary(df$timestamp)
strptime('2014-10-30 00:00:00')
class(df$timestamp)
POSIXlt('2014-10-30 00:00:00')
?POSIX
?POSIXlt
as.POSIXlt('2014-10-30 00:00:00')
as.POSIXct('2014-10-30 00:00:00')
as.POSIXct('2014-10-30 23:00:00')
timelimits <- list(
from = as.POSIXct('2014-10-30 00:00:00'),
to = as.POSIXct('2014-10-30 23:59:59')
)
df.filtered.1 <- df[df$timestamp >= timelimits$from & df$timestamp <= timelimits$to, ]
summary(df.filtered.1$timestamp)
hist(df.filtered.1$timestamp, breaks='hours')
df$timestamp
df$timestamp$hour
class(df$timestamp$hour)
df$hour <- df$timestamp$hour
hist(df$hour)
hist(df$hour, breaks=1)
?hist
hist(df$hour, breaks=24)
summary(df$hour)
hist(df$hour, breaks=23)
hist(df$hour, breaks=25)
hist(df$hour, bin=1)
hist(df$hour, breaks=24)
hist(df$hour, breaks=24)
df$text
?tolower
?grep
grep('Путин', df$text)
grep('путин', tolower(df$text))
grep('путин', tolower(df$text)) | grep('путин', tolower(df$title.text))
grep('путин', tolower(df$title.text))
df[grep('путин', tolower(df$text)) | grep('путин', tolower(df$title.text)), ]
df[grep('путин', tolower(df$text)), ]
unique(df$title.href)
names(unique(df$title.href))
?subset
?unique
min(df$text)
?first
df.unique2 <- data.frame(link = unique(df$title.href))
df.unique2$timestamp <- df$timestamp[df$title.href = df.unique2$link]
df.unique2$timestamp <- df$timestamp[df$title.href == df.unique2$link]
?group.by
?groupby
?group
?aggreagte
df[grep('путин', tolower(df$text)), ]
filter.vec <- grep('путин', tolower(df$text)) + grep('путин', tolower(df$title.text))
filter.vec <- append(grep('путин', tolower(df$text)), grep('путин', tolower(df$title.text)))
filter.vec
filter.vec <- unique(filter.vec)
df[filter.vec, ]
df$title
df$title.text
head(df)
df$day <- strftime(df$timestamp, format='%d %b')
df$day
library(reshape2)
?dcast
?aggregate
aggregate(df[, c('day', 'hour')], by = list('day', 'hour'), FUN = nrow)
df[, c('day', 'hour')]
?nrow
aggregate(df[, c('day', 'hour')], by = list('day', 'hour'), FUN = length)
aggregate(df[, c('day', 'hour')], by = list('hour'), FUN = length)
aggregate(df, by = list(df$day, df$hour), FUN = nrow)
aggregate(df, by = list(df$day, df$hour), FUN = length)
df.plot <- aggregate(df, by = list(df$day, df$hour), FUN = length)
df.plot <- df.plot[, 1:3]
names(df.plot) <- c('Date', 'Hour', 'Amount')
df.plot
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = cpecPal(100), guide_legend(title="Количество новостей"))
plot
library("ggplot2", "RColorBrewer")
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
brewer.pal
library(RColorBrewer)
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
library(ggplot2)
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = cpecPal(100), guide_legend(title="Количество новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество новостей"))
plot
specPal <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=seq(0,23), labels=seq(0,23))
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="right", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=seq(0,23), labels=seq(0,23))
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
#plot <- plot + scale_x_discrete("Часы", limits=seq(0,23), labels=seq(0,23))
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=c(0,23), labels=seq(0,23))
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- plot + scale_x_discrete("Часы", limits=c(0,23))
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=c(0,23))
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:23, labels=0:23)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:22, labels=0:22)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:23, labels=0:22)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:22, labels=0:23)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "black"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
plot <- ggplot(df.plot,
aes(x = Hour, y = Date, fill = Amount))
plot <- plot + geom_tile()
plot <- plot + scale_fill_gradientn(guide="colourbar", colours = specPal(100), guide_legend(title="Количество \nновостей"))
plot <- plot + scale_x_discrete("Часы", limits=0:22, labels=0:23)
plot <- plot + scale_y_discrete("Дата")
plot <- plot + coord_equal()
plot <- plot + theme_bw()
plot <- plot + theme(legend.position="bottom", legend.background = element_rect(colour = "grey"))
plot <- plot + ggtitle(expression("Частота публикации новостей"))
plot
Sys.time()
Sys.time() - 3600
?melt
library(reshape2)
?dcast
long <- melt(airquality, id.vars=c('Month', 'Day'))
head(long)
dcast(long)
dcast(long, Month ~ variable)
dcast(long, Month + Day ~ variable)
?grep
head(airquality)
qplot(Temp, data=airquality, geom="histogram")
qplot(Wind, data=airquality, geom="histogram")
qplot(Wind, data=airquality, geom="histogram", aes(fill = ..count..))
head(iris)
as.logical(NaN)
Inf - Inf
Inf / 0
-Inf * 0
i.usage <- c(NA, NA, NA, NA, NA, NA, NA, 2, 3, 5,
7, 8, 11, 12, 14, 16, 18, 21, 23, NA,
NA, NA, NA, 39)
t.iu <- ts(i.usage, start = 1990, end = 2013)
plot(t.iu)
model <- HoltWinters(t.iu, beta=FALSE, gamma=FALSE)
?HoltWinters
concern <- data.frame(
years = c(1990, 1997, 1999, 2000, 2001, 2003, 2007, 2008, 2014),
concern = c(78, 72, 70, 82, 78, 95, 91, 90, 90))
i.dates <- data.frame(
dates = c(2006, 2013),
n = c('WikiLeaks', 'Snowden'))
library(ggplot2)
p <- ggplot(concern, aes(x = years, y = concern))
p <- p + geom_point(size = 4)
p <- p + stat_smooth(se = FALSE)
p <- p + ylim(0, 100)
p <- p + labs(title="Overall privacy concerns dynamics",
y = "Privacy concern (%)",
x = "Year")
p <- p + geom_text(data = i.dates, aes(x = dates, y = c(0, 0), label = n),
angle = 90, hjust=0, vjust = -1)
p <- p + geom_vline(xintercept = i.dates$dates, color = 'red')
p
i.users <- c(117.238,178.29,301.15,427.14,494.4,688.358,760.212,897.75,1038.432,1182.24,1395.597,1546.635,1768.962,2065.05,2298.318,2535.516,2778.555)
i.users <- ts(i.users, start = 1997)
plot(diff(i.users, differences=2))
acf(i.users)
pacf(i.users)
library('forecast')
model <- arima(i.users, order=c(1,2,2))
prediction <- forecast.Arima(model, h = 7)
plot.forecast(prediction, main="Number of internet users worldwide",
ylab = 'Millions of users',
xlab = 'Year')
plot(diff(i.users, differences=2))
pacf(i.users)
library('forecast')
model <- arima(i.users, order=c(1,2,2))
prediction <- forecast.Arima(model, h = 7)
plot.forecast(prediction, main="Number of internet users worldwide",
ylab = 'Millions of users',
xlab = 'Year')
ls()
?ls
rm(list = ls())
setwd('/Users/quatsch/Documents/duma/duma')
library(shiny)
runApp()
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
# Loading json as list object
# ssl.verifypeer - for https on Windows
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
library(RCurl)
library(rjson)
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
# Loading json as list object
# ssl.verifypeer - for https on Windows
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
names(json.data)
json.data$thisversionrun
?strptime
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
results.from.json <- function(json.data){
df <- data.frame(title=c(), link=c(), time=c(), text=c())
for(item in json.data$results$collection1){
r = data.frame(title = item$title$text,
link = item$title$href,
time = item$timestamp,
text = item$text)
df <- rbind(df, r)
}
return(df)
}
js.data()
js.data <- reactive({
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
json.file <- getURL(json.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
})
df <- results.from.json(js.data())
api.name <- '1xl232p8'
api.key <- 'DTndIua4tfpz5kxITOILI6FvmGV8xw9g'
# Loading libraries
library(RCurl)
library(rjson)
# Constructing URL for last json snapshot
json.url <- paste0('https://www.kimonolabs.com/api/', api.name, '?apikey=', api.key)
# Loading json as list object
# ssl.verifypeer - for https on Windows
json.file <- getURL(json.url, .encoding = 'UTF-8',
.opts = list(ssl.verifypeer = FALSE))
json.data <- fromJSON(json.file)
# Parsing JSON fucntion
results.from.json <- function(json.data){
df <- data.frame(title=c(), link=c(), time=c(), text=c())
for(item in json.data$results$collection1){
r = data.frame(title = item$title$text,
link = item$title$href,
time = item$timestamp,
text = item$text)
df <- rbind(df, r)
}
return(df)
}
df <- results.from.json(json.data)
head(df)
?paste
df$f.txt <- paste(df$title, df$text, sep=": ")
df$f.txt
library(tm)
install.packages("tm")
library("tm")
corp <- Corpus(DataframeSource(data.frame(df[, "f.txt"])))
corp
?stopwords
stopwords('en')
stopwords('ru')
corp <- tm_map(corp, removePunctuation)
corp <- tm_map(corp, tolower)
corp <- tm_map(corp, function(x) removeWords(x, stopwords("ru")))
tdm <- TermDocumentMatrix(corp)
tdm
m <- as.matrix(tdm)
m
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
d
pal <- brewer.pal(9, "BuGn")
library(RColorBrewer)
pal <- brewer.pal(9, "BuGn")
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
library(wordcloud)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
wordcloud(d$word[1:10],d$freq[1:10], scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
wordcloud(d$word[1:10],d$freq[1:10])
wordcloud(d$word, d$freq)
wordcloud(d$word, d$freq, random.order=T, colors=pal)
wordcloud(d$word, d$freq, random.order=T, colors=pal, scale = c(8,.3))
, scale=c(1,.1),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal
wordcloud(d$word, d$freq, random.order=T, colors=pal, scale = c(1,.1))
wordcloud(d$word, d$freq, random.order=T, colors=pal, scale = c(2,.1))
wordcloud(d$word, d$freq, random.order=T, colors=pal, scale = c(2,.1), max.words=100)
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
for(i in 1:1){
print(i)
}
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
df <- data.frame()
for(i in 1:json.data$version){
print(i)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
df <- data.frame()
for(i in 1:5){
print(i)
csv.url <- paste0('https://www.kimonolabs.com/api/csv/', i, '/', api.name, '?apikey=', api.key)
csv.file <- getURL(csv.url, .encoding = 'UTF-8', .opts = list(ssl.verifypeer = FALSE))
csv.rows <- read.csv(textConnection(csv.file), skip=1)
df <- rbind(df, csv.rows)
}
head(df)
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
install.packages("SnowballC")
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
?wordcloud
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
shiny::runApp('~/Documents/RIA_lectures/shiny_test')
setwd('/Users/quatsch/Documents/RIA_Lectures/shiny_test')
Sys.setlocale(category = "LC_ALL", locale = "C")
library(shinyapps)
shinyapps::setAccountInfo(name="tolmach", token="5513C3D68CFF512E99F8AAAD8F35F7E7", secret="VxH/rA4poXz8jRPnUiauYU+OgIkz1v6pEvGWIWUt")
deployApp()
devtools::install_github("rstudio/rmarkdown")
